import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { formatUnits } from "ethers/lib/utils";
import { squidAxlUSDCWarningLink } from "../../core/externalLinks";
import { useEstimate } from "../../hooks/useEstimate";
import { useSwap } from "../../hooks/useSwap";
import { formatWalletAddress } from "../../services/internal/walletService";
import { useSquidStore } from "../../store/useSquidStore";
import { LoadingSkeleton } from "../LoadingSkeleton";
import { NumericValue } from "../NumericValue";
import { TextLink } from "../TextLink";
import { TokenUSDValue } from "../TokenUSDValue";
import { TotalFees } from "../estimate/TotalFees";
const LoadableRowValue = ({ children, isFetching, }) => {
    if (isFetching) {
        return _jsx(LoadingSkeleton, {});
    }
    return (_jsx("span", Object.assign({ className: "tw-flex tw-flex-row tw-items-center tw-gap-1" }, { children: children })));
};
export const TransactionFooter = ({ squidRoute, toAmount, toToken, fromToken, exchangeRate, }) => {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
    const { destinationAddress } = useSwap();
    const { toAmountMin, firstFeeCost, expressFeeCost, expectedGasRefundCost, isFetching, destChainNativeToken, proposedGasDestinationAmount, integratorFeeCost, expressActivatedUI, } = useEstimate();
    const { config } = useSquidStore();
    const titleComponent = (title) => (_jsx("span", Object.assign({ className: "tw-my-2.5 tw-flex tw-flex-row tw-items-center tw-text-base tw-font-semibold" }, { children: _jsx("span", { children: title }) })));
    return (_jsxs("div", Object.assign({ className: "tw-mt-[16px] tw-flex tw-flex-col tw-border-t-[1px] tw-border-base-200 tw-text-base tw-font-normal" }, { children: [titleComponent("Summary"), _jsxs("ul", Object.assign({ style: { gap: "0.27rem" }, className: "tw-flex tw-w-full  tw-flex-col tw-text-sm" }, { children: [_jsxs("li", Object.assign({ className: "tw-flex tw-flex-row tw-items-center tw-justify-between" }, { children: [_jsx("span", { children: "Convert from" }), _jsx(LoadableRowValue, Object.assign({ isFetching: isFetching }, { children: _jsxs("span", Object.assign({ className: "tw-flex tw-flex-row tw-gap-1" }, { children: [_jsx(NumericValue, { value: formatUnits((_a = squidRoute === null || squidRoute === void 0 ? void 0 : squidRoute.params.fromAmount) !== null && _a !== void 0 ? _a : "0", fromToken === null || fromToken === void 0 ? void 0 : fromToken.decimals), significantFigures: 4 }), " ", fromToken === null || fromToken === void 0 ? void 0 : fromToken.symbol, _jsx(TokenUSDValue, { className: "tw-text-sm tw-text-neutral-content", token: fromToken, balance: formatUnits((_b = squidRoute === null || squidRoute === void 0 ? void 0 : squidRoute.params.fromAmount) !== null && _b !== void 0 ? _b : "0", fromToken === null || fromToken === void 0 ? void 0 : fromToken.decimals) })] })) }))] })), _jsxs("li", Object.assign({ className: "tw-flex tw-flex-row tw-items-center tw-justify-between" }, { children: [_jsx("span", { children: "Min receive" }), _jsx(LoadableRowValue, Object.assign({ isFetching: isFetching }, { children: _jsxs("span", Object.assign({ className: "tw-flex tw-flex-row tw-gap-1" }, { children: [_jsx(NumericValue, { value: toAmountMin, significantFigures: 4, currency: {
                                                symbol: toToken === null || toToken === void 0 ? void 0 : toToken.symbol,
                                                symbolPosition: "after",
                                            } }), " ", _jsx(TokenUSDValue, { className: "tw-text-sm tw-text-neutral-content", token: toToken, balance: toAmountMin })] })) }))] })), (config === null || config === void 0 ? void 0 : config.enableGetGasOnDestination) && (_jsxs("li", Object.assign({ className: "tw-flex tw-flex-row tw-items-center tw-justify-between" }, { children: [_jsx("span", { children: "Gas to receive" }), _jsx(LoadableRowValue, Object.assign({ isFetching: isFetching }, { children: _jsxs("span", Object.assign({ className: "tw-flex tw-flex-row tw-gap-1" }, { children: [_jsx(NumericValue, { value: (_c = proposedGasDestinationAmount.value.toString()) !== null && _c !== void 0 ? _c : "0", significantFigures: 4, currency: {
                                                symbol: destChainNativeToken === null || destChainNativeToken === void 0 ? void 0 : destChainNativeToken.symbol,
                                                symbolPosition: "after",
                                            } }), " ", _jsx(TokenUSDValue, { className: "tw-text-sm tw-text-neutral-content", token: destChainNativeToken, balance: proposedGasDestinationAmount.value.toString() })] })) }))] }))), _jsxs("li", Object.assign({ className: "tw-flex tw-flex-row tw-items-center tw-justify-between" }, { children: [_jsx("span", { children: "Exchange rate" }), _jsx(LoadableRowValue, Object.assign({ isFetching: isFetching }, { children: _jsxs(_Fragment, { children: [_jsxs("span", { children: [+toAmount > 0 ? "1" : "0", " ", fromToken === null || fromToken === void 0 ? void 0 : fromToken.symbol] }), _jsx("span", { children: "=" }), _jsx("span", { children: exchangeRate !== undefined && (_jsx(NumericValue, { value: exchangeRate, significantFigures: 4, currency: {
                                                    symbol: toToken === null || toToken === void 0 ? void 0 : toToken.symbol,
                                                    symbolPosition: "after",
                                                } })) })] }) }))] })), _jsxs("li", Object.assign({ className: "tw-flex tw-flex-row tw-items-center tw-justify-between" }, { children: [_jsx("span", { children: "To" }), _jsx("span", Object.assign({ className: "tw-flex tw-flex-row tw-items-center" }, { children: formatWalletAddress(destinationAddress, 10) }))] }))] })), _jsxs("div", Object.assign({ className: "tw-mt-[16px] tw-flex tw-flex-col tw-border-t-[1px] tw-border-base-200 tw-text-base tw-font-normal" }, { children: [titleComponent("Fee breakdown"), _jsx("span", Object.assign({ className: "tw-flex tw-w-full" }, { children: _jsxs("ul", Object.assign({ style: { gap: "0.27rem" }, className: "tw-flex tw-w-full  tw-flex-col tw-text-sm" }, { children: [_jsxs("li", Object.assign({ className: "tw-flex tw-flex-row tw-items-center tw-justify-between" }, { children: [_jsx("span", { children: "Cross-chain gas fees" }), _jsx(LoadableRowValue, Object.assign({ isFetching: isFetching }, { children: _jsxs("span", Object.assign({ className: "tw-flex tw-flex-row tw-gap-1" }, { children: [_jsx(NumericValue, { value: formatUnits((_d = firstFeeCost === null || firstFeeCost === void 0 ? void 0 : firstFeeCost.amount) !== null && _d !== void 0 ? _d : "0", (_e = firstFeeCost === null || firstFeeCost === void 0 ? void 0 : firstFeeCost.token.decimals) !== null && _e !== void 0 ? _e : 18), significantFigures: 4, currency: {
                                                            symbol: firstFeeCost === null || firstFeeCost === void 0 ? void 0 : firstFeeCost.token.symbol,
                                                            symbolPosition: "after",
                                                        } }), _jsxs("span", Object.assign({ className: "tw-text-neutral-content" }, { children: ["(", _jsx(NumericValue, { formatIfVerySmall: 0.01, currency: { symbol: "$", symbolPosition: "before" }, value: (_f = firstFeeCost === null || firstFeeCost === void 0 ? void 0 : firstFeeCost.amountUSD) !== null && _f !== void 0 ? _f : "0" }), ")"] }))] })) }))] })), expressActivatedUI && (_jsxs("li", Object.assign({ className: "tw-flex tw-flex-row tw-items-center tw-justify-between" }, { children: [_jsx("span", { children: "Boost fee" }), _jsx(LoadableRowValue, Object.assign({ isFetching: isFetching }, { children: _jsxs("span", Object.assign({ className: "tw-flex tw-flex-row tw-items-center tw-gap-1" }, { children: ["+", " ", _jsx(NumericValue, { value: formatUnits((_g = expressFeeCost === null || expressFeeCost === void 0 ? void 0 : expressFeeCost.amount) !== null && _g !== void 0 ? _g : "0", (_h = expressFeeCost === null || expressFeeCost === void 0 ? void 0 : expressFeeCost.token.decimals) !== null && _h !== void 0 ? _h : 18), significantFigures: 4, currency: {
                                                            symbol: expressFeeCost === null || expressFeeCost === void 0 ? void 0 : expressFeeCost.token.symbol,
                                                            symbolPosition: "after",
                                                        } }), _jsxs("span", Object.assign({ className: "tw-text-neutral-content" }, { children: ["(", _jsx(NumericValue, { formatIfVerySmall: 0.01, currency: { symbol: "$", symbolPosition: "before" }, value: (_j = expressFeeCost === null || expressFeeCost === void 0 ? void 0 : expressFeeCost.amountUSD) !== null && _j !== void 0 ? _j : "0" }), ")"] }))] })) }))] }))), _jsxs("li", Object.assign({ className: "tw-flex tw-flex-row tw-items-center tw-justify-between" }, { children: [_jsx("span", { children: "Expected gas refund" }), _jsx(LoadableRowValue, Object.assign({ isFetching: isFetching }, { children: _jsxs("span", Object.assign({ className: "tw-flex tw-flex-row tw-items-center tw-gap-1" }, { children: ["-", " ", _jsx(NumericValue, { value: formatUnits(expectedGasRefundCost !== null && expectedGasRefundCost !== void 0 ? expectedGasRefundCost : "0", (_k = firstFeeCost === null || firstFeeCost === void 0 ? void 0 : firstFeeCost.token.decimals) !== null && _k !== void 0 ? _k : 18), significantFigures: 4, currency: {
                                                            symbol: firstFeeCost === null || firstFeeCost === void 0 ? void 0 : firstFeeCost.token.symbol,
                                                            symbolPosition: "after",
                                                        } }), _jsx(TokenUSDValue, { className: "tw-text-sm tw-text-neutral-content", token: firstFeeCost === null || firstFeeCost === void 0 ? void 0 : firstFeeCost.token, balance: formatUnits(expectedGasRefundCost !== null && expectedGasRefundCost !== void 0 ? expectedGasRefundCost : "0", (_l = firstFeeCost === null || firstFeeCost === void 0 ? void 0 : firstFeeCost.token.decimals) !== null && _l !== void 0 ? _l : 18) })] })) }))] })), config.collectFees && (_jsxs("li", Object.assign({ className: "tw-flex tw-flex-row tw-items-center tw-justify-between" }, { children: [_jsx("span", { children: "Integrator fee" }), _jsx(LoadableRowValue, Object.assign({ isFetching: isFetching }, { children: _jsxs("span", Object.assign({ className: "tw-flex tw-flex-row tw-items-center tw-gap-1" }, { children: ["+", " ", _jsx(NumericValue, { value: formatUnits((_m = integratorFeeCost === null || integratorFeeCost === void 0 ? void 0 : integratorFeeCost.amount) !== null && _m !== void 0 ? _m : "0", (_o = integratorFeeCost === null || integratorFeeCost === void 0 ? void 0 : integratorFeeCost.token.decimals) !== null && _o !== void 0 ? _o : 18), significantFigures: 4, currency: {
                                                            symbol: integratorFeeCost === null || integratorFeeCost === void 0 ? void 0 : integratorFeeCost.token.symbol,
                                                            symbolPosition: "after",
                                                        } }), _jsxs("span", Object.assign({ className: "tw-text-neutral-content" }, { children: ["(", _jsx(NumericValue, { formatIfVerySmall: 0.01, currency: { symbol: "$", symbolPosition: "before" }, value: (_p = integratorFeeCost === null || integratorFeeCost === void 0 ? void 0 : integratorFeeCost.amountUSD) !== null && _p !== void 0 ? _p : "0" }), ")"] }))] })) }))] }))), _jsx(TotalFees, { label: "Total", isFetching: isFetching })] })) }))] })), _jsxs("div", Object.assign({ className: "tw-mt-[16px] tw-flex tw-flex-col tw-border-t-[1px] tw-border-base-200 tw-text-base tw-font-normal" }, { children: [titleComponent("Information"), _jsxs("span", Object.assign({ className: "tw-block tw-text-xs tw-leading-[1.5] tw-text-neutral-content" }, { children: ["If market prices fluctuate significantly, the transaction may revert and you will receive axlUSDC on the destination chain.", " ", _jsx(TextLink, Object.assign({ href: squidAxlUSDCWarningLink }, { children: "Learn more" }))] }))] }))] })));
};
//# sourceMappingURL=TransactionFooter.js.map